
import sys
from datetime import date

def iter_elf_symbols(f):
    from elftools.elf.elffile import ELFFile
    from elftools.elf.sections import SymbolTableSection

    elf = ELFFile(f)
    section = elf.get_section_by_name('.symtab')

    if section == None or not isinstance(section, SymbolTableSection):
        return

    for sym in section.iter_symbols():
        name = sym.name

        if (len(name) == 0) or ('$' in name) or ('.' in name):
            continue

        yield (sym.entry.st_value, name, sym.entry.st_info.type == 'STT_FUNC')

def main(args):
    try:
        elfname = args[0]

    except IndexError:
        sys.exit("Usage: {} <ELF>".format(sys.argv[0]))

    with open(elfname, 'rb') as f:
        elf_symbols = { addr: (name, is_func) for addr, name, is_func in iter_elf_symbols(f) }

    print("")

    print(f"@ generated by elf2ref on {date.today()}")
    print("")

    print(".macro fun value, name")
    print("    .global \\name")
    print("    .type \\name, function")
    print("    .set \\name, \\value")
    print(".endm")
    print("")

    print(".macro dat value, name")
    print("    .global \\name")
    print("    .type \\name, object")
    print("    .set \\name, \\value")
    print(".endm")
    print("")

    addr_list = sorted(elf_symbols.keys())

    for addr in addr_list:
        if addr < 0x02000000:
            continue

        sym = elf_symbols[addr]

        print(f"{'fun' if sym[1] else 'dat'} 0x{addr:08X}, {sym[0]}")

if __name__ == '__main__':
    main(sys.argv[1:])
